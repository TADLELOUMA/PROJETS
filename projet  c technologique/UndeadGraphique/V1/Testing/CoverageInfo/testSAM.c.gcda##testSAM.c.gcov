        -:    0:Source:/net/cremi/thdiallo/projet  c technologique/V1/testSAM.c
        -:    0:Graph:/net/cremi/thdiallo/projet  c technologique/V1/CMakeFiles/testSAM.dir/testSAM.c.gcno
        -:    0:Data:/net/cremi/thdiallo/projet  c technologique/V1/CMakeFiles/testSAM.dir/testSAM.c.gcda
        -:    0:Runs:14
        -:    0:Programs:2
        -:    1:#include <stdlib.h>
        -:    2:#include <stdbool.h>
        -:    3:#include <assert.h>
        -:    4:#include <stdio.h>
        -:    5:#include "game.h"
        -:    6:
        -:    7:
        -:    8:bool rep=true;
       14:    9:bool test_add_mirror(){
       14:   10:     game jeu= new_game();
       14:   11:     assert(jeu);
       14:   12:     add_mirror(jeu, 1, 0, 3);
       14:   13:     add_mirror(jeu, 0, 3, 3);
       14:   14:     add_mirror(jeu, 1, 0, 2);
       14:   15:     add_mirror(jeu, 1, 2, 1);
       14:   16:     add_mirror(jeu, 0, 3, 1);
       14:   17:     add_mirror(jeu, 1, 0, 0);
       14:   18:     add_mirror(jeu, 1, 3, 0);
        -:   19:
       14:   20:     if((get_content(jeu,0,3)!=ANTIMIRROR) || (get_content(jeu,3,3)!=MIRROR) || (get_content(jeu,0,2)!=ANTIMIRROR) ||(get_content(jeu,2,1)!=ANTIMIRROR) || (get_content(jeu,3,1)!=MIRROR) || (get_content(jeu,0,0)!=ANTIMIRROR) || (get_content(jeu,3,0)!=ANTIMIRROR))
        -:   21:           {
    #####:   22:           fprintf(stderr,("Basic test on add_mirror failed\n"));
    #####:   23:           rep= false;
        -:   24:           
        -:   25:           }
       14:   26:     delete_game(jeu);
       14:   27:     return rep;
        -:   28:}
       14:   29:bool test_set_required_nb_monster(){
       14:   30:	game jeu= new_game();
       14:   31:        assert(jeu);
       14:   32:	set_required_nb_monsters(jeu, ZOMBIE,5);
       14:   33:	set_required_nb_monsters(jeu, VAMPIRE,2);
       14:   34:	set_required_nb_monsters(jeu, GHOST,2);
       14:   35:if(required_nb_monsters(jeu, ZOMBIE)!=5 || required_nb_monsters(jeu,VAMPIRE)!=2||required_nb_monsters(jeu, GHOST)!=2){
    #####:   36:	fprintf(stderr,("Basic test on add_mirror failed\n"));
    #####:   37:           rep= false;
        -:   38:           
        -:   39:           }
       14:   40:     delete_game(jeu);
       14:   41:     return rep;
        -:   42:
        -:   43:}
       14:   44:bool test_set_required_nb_seen(){
       14:   45:bool nb=true;
       14:   46:        game jeu= new_game();
       14:   47:        assert(jeu);
       14:   48:	set_required_nb_seen(jeu, N, 0, 0);
       14:   49:	set_required_nb_seen(jeu, N, 1, 3);
       14:   50:	set_required_nb_seen(jeu, N, 2, 3);
       14:   51:	set_required_nb_seen(jeu, N, 3, 0);
       14:   52:	set_required_nb_seen(jeu, S, 0, 0);
       14:   53:	set_required_nb_seen(jeu, S, 1, 3);
       14:   54:	set_required_nb_seen(jeu, S, 2, 2);
       14:   55:	set_required_nb_seen(jeu, S, 3, 3);
       14:   56:	set_required_nb_seen(jeu, W, 3, 3);
       14:   57:	set_required_nb_seen(jeu, W, 2, 3);
       14:   58:	set_required_nb_seen(jeu, W, 1, 2);
       14:   59:	set_required_nb_seen(jeu, W, 0, 0);
       14:   60:	set_required_nb_seen(jeu, E, 3, 2);
       14:   61:	set_required_nb_seen(jeu, E, 2, 3);
       14:   62:	set_required_nb_seen(jeu, E, 1, 0);
       14:   63:	set_required_nb_seen(jeu, E, 0, 0);
        -:   64:
       14:   65:if((required_nb_seen(jeu, N, 0)!=0 )|| (required_nb_seen(jeu, N, 1)!=3) ||(required_nb_seen(jeu, N, 2)!=3 )|| (required_nb_seen(jeu, N, 3)!=0)){
    #####:   66:	fprintf(stderr,"le test de  base sur set_required_nb_seen  a echoué cote NORD\n");
    #####:   67:          	nb= false;
        -:   68:	}
       14:   69:else if ((required_nb_seen(jeu, S, 0)!=0)||(required_nb_seen(jeu, S, 1)!=3) ||(required_nb_seen(jeu, S, 2)!=2 )||(required_nb_seen(jeu, S, 3)!=3)){
    #####:   70:	fprintf(stderr,"le test de  base sur set_required_nb_seen  a echoué cote SUD\n");
    #####:   71:          	nb= false;
        -:   72:	}
       14:   73:else if ((required_nb_seen(jeu, W, 3)!=3) ||(required_nb_seen(jeu, W, 2)!=3 )||(required_nb_seen(jeu, W, 1)!=2) || (required_nb_seen(jeu, W, 0)!=0)){
    #####:   74:	fprintf(stderr,"le test de  base sur set_required_nb_seen  a echoué cote OUEST\n");
    #####:   75:          	nb= false;
        -:   76:	}
       14:   77:else if ((required_nb_seen(jeu, E, 3)!=2) ||(required_nb_seen(jeu, E, 2)!=3) ||(required_nb_seen(jeu, E, 1)!=0) ||(required_nb_seen(jeu, E, 0)!=0)){
    #####:   78:		fprintf(stderr,"le test de  base sur set_required_nb_seen  a echoué cote EST\n");
    #####:   79:          	nb= false;
        -:   80:	}
        -:   81:
       14:   82:	delete_game(jeu);
       14:   83:     	return nb;
        -:   84:      
        -:   85: }
        -:   86:
       14:   87:int main(void){
       14:   88:  bool result = true;
       14:   89: result = test_set_required_nb_monster() && result;
       14:   90:  result = test_add_mirror() && result;
       14:   91:result = test_set_required_nb_seen() && result;
       14:   92:  if(result){
       14:   93:      printf("Tests successfull\n");
       14:   94:      return EXIT_SUCCESS;
        -:   95:  }
        -:   96:  else{
    #####:   97:      printf("Tests failed\n");
    #####:   98:      return EXIT_FAILURE;
        -:   99:  }
        -:  100:}
        -:  101:
        -:  102:
