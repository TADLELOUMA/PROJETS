        -:    0:Source:/net/cremi/thdiallo/projet  c technologique/V1/game_io.c
        -:    0:Graph:/net/cremi/thdiallo/projet  c technologique/V1/CMakeFiles/test_DIAK.dir/game_io.c.gcno
        -:    0:Data:/net/cremi/thdiallo/projet  c technologique/V1/CMakeFiles/test_DIAK.dir/game_io.c.gcda
        -:    0:Runs:14
        -:    0:Programs:2
        -:    1:#include "game.h"
        -:    2:#include "game_io.h"
        -:    3:#include<stdlib.h>
        -:    4:#include<string.h>
        -:    5:#include<stdio.h>
        -:    6:#include<stdbool.h>
        -:    7:
        -:    8:
        -:    9:#define MAX 4096//on suppose que le maximum de ligne à lire  ne depasse pas 406
        -:   10:/*pour faire la fonction load_game on va utiliser deux fonctions auxiliaire :la premiere qui la read_next_line
        -:   11:qui nous permet de lire une ligne en entier et stock les caracteres separé par  des espaces  dans un tableau de caractere et la seconde
        -:   12:c'est une fonction qui est convert_line qui en cas de besoin de  convertir la lgne stocker dans le resultat de
        -:   13:read_next_line  en  long on l'utilse .En gros ,read_next_line lit la ligne depuis le fichier et convert_line la convertit
        -:   14:si c'est necessaire */
        -:   15:
    #####:   16:char* read_next_line(FILE* p_f, long* p_size){
    #####:   17:  char* s = malloc(MAX*sizeof(char));
    #####:   18:  if(s==NULL){
    #####:   19:    fprintf(stderr,"error");
    #####:   20:    free(s);
    #####:   21:    return NULL;
        -:   22: }
    #####:   23: long old_pos = ftell(p_f);
    #####:   24: long len = 0;
    #####:   25: if(fgets(s,MAX, p_f ) != NULL){
    #####:   26:   len = ftell(p_f)-old_pos;
    #####:   27:   if(s[len-1]=='\n'){
    #####:   28:     s[len-1]= '\0';
    #####:   29:     len--;
        -:   30: } else{
    #####:   31:   if(!feof(p_f)){      // to detect error from last line without '\n'
    #####:   32:    fprintf(stderr, "line too long ...");
    #####:   33:    exit(EXIT_FAILURE);
        -:   34:  }
        -:   35:}
    #####:   36:(*p_size)=len;
    #####:   37:return s;
        -:   38:}
    #####:   39:free(s);
    #####:   40:return NULL; // in case of eof
        -:   41:}
    #####:   42:long* convert_line(char* line, long* p_size){
    #####:   43:  long* arr = malloc((*p_size)*sizeof(long));
    #####:   44:  if(arr ==NULL){
    #####:   45:    fprintf(stderr,"error");
    #####:   46:    free(arr);
    #####:   47:    return NULL;
        -:   48:  }
    #####:   49:  long arr_s= 0;
    #####:   50:  char* token = strtok(line," ");
    #####:   51:  while(token !=NULL){
    #####:   52:    char* end_value = token;
    #####:   53:    long value = strtol(token, &end_value,10);
    #####:   54:    if ((*end_value)=='\0') {   // convert was successfull
    #####:   55:      arr[arr_s]=value;
    #####:   56:      arr_s++;
        -:   57:    }else{
    #####:   58:      free(arr);
    #####:   59:      return NULL;
        -:   60:    }
    #####:   61:    token = strtok(NULL," ");
        -:   62:  }
    #####:   63:  (*p_size)=arr_s;
    #####:   64:  return arr;
        -:   65:}
        -:   66:
    #####:   67:game load_game(char* filename){
    #####:   68:  FILE* fichier =fopen(filename,"r");
    #####:   69:  if(fichier == NULL){
    #####:   70:    fprintf(stderr,"invalide fichier sur load_game");
    #####:   71:    exit(EXIT_FAILURE);
        -:   72:  }
        -:   73://  char* end=NULL;
    #####:   74:  long* tab=NULL;
        -:   75:
    #####:   76:  int compt = 1;                   // pour connaitre le nombre de ligne à lire
    #####:   77:  long size = 0;
    #####:   78:  char* line =NULL;
    #####:   79:  line =read_next_line(fichier, &size);
    #####:   80:  tab = convert_line(line, &size);
    #####:   81:  if(!tab){
    #####:   82:    fprintf(stderr, "tableaux vide");
    #####:   83:    exit(EXIT_FAILURE);
        -:   84:  }
    #####:   85:  if(size == 0 || size>2){
        -:   86:
    #####:   87:    fprintf(stderr,"error de size en 83");
    #####:   88:    exit(EXIT_FAILURE);
        -:   89:  }
        -:   90:
    #####:   91:    game jeu = new_game_ext(tab[0],tab[1]);
    #####:   92:  line =read_next_line(fichier, &size);
    #####:   93:  while(compt < 6 && line !=NULL){
    #####:   94:    if(!line){
    #####:   95:      fprintf(stderr, "echec");
    #####:   96:      exit(EXIT_FAILURE);
        -:   97:    }
    #####:   98:    tab = convert_line(line, &size);
    #####:   99:    if(tab == NULL){
    #####:  100:      fprintf(stderr,"tab invalide dans case2");
    #####:  101:      exit(EXIT_FAILURE);
        -:  102:    }
        -:  103:
    #####:  104:    switch (compt) {
        -:  105:
        -:  106:    case 1: {
    #####:  107:      for(int i = 0; i < size; i++){
    #####:  108:        if(i == 0){
    #####:  109:          set_required_nb_monsters(jeu, VAMPIRE, tab[i]);
        -:  110:        }
    #####:  111:        if( i ==1){
    #####:  112:          set_required_nb_monsters(jeu, GHOST, tab[i]);
        -:  113:        }
    #####:  114:        if(i == 2){
    #####:  115:            set_required_nb_monsters(jeu, ZOMBIE, tab[i]);
        -:  116:        }else{
    #####:  117:          set_required_nb_monsters(jeu, SPIRIT, tab[i]);
        -:  118:        }
        -:  119:      }
        -:  120:    }
    #####:  121:    break;
        -:  122:    case 2: {                                                // troisième ligne du fichier
        -:  123:
    #####:  124:      for(int i = 0; i < size; i++){
    #####:  125:        set_required_nb_seen(jeu, N ,i , tab[i]);
        -:  126:      }
        -:  127:    }
    #####:  128:    break;
        -:  129:    case 3: {                                              // quatrième ligne du fichier
    #####:  130:      for(int i = 0; i < size; i++){
    #####:  131:        set_required_nb_seen(jeu, S ,i , tab[i]);
        -:  132:      }
        -:  133:    }
    #####:  134:    break;
        -:  135:    case 4: {                                            // cinquième ligne du fichier
    #####:  136:      for(int i = 0; i < size; i++){
    #####:  137:        set_required_nb_seen(jeu, E ,i , tab[i]);
        -:  138:      }
        -:  139:    }
    #####:  140:    break;
        -:  141:    case 5: {                                           // sixieme ligne du fichier
    #####:  142:      for(int i = 0; i < size; i++){
    #####:  143:        set_required_nb_seen(jeu, W ,i , tab[i]);
        -:  144:      }
        -:  145:    }
    #####:  146:    break;
        -:  147:    }
    #####:  148:    line = read_next_line(fichier, &size);
    #####:  149:    compt = compt + 1;
        -:  150:  }
    #####:  151:  int compt2 = game_height(jeu)-1;
        -:  152:
    #####:  153:  while(compt2 >= 0  && line != NULL){
    #####:  154:    if(!line){
    #####:  155:      fprintf(stderr, "echec");
    #####:  156:      exit(EXIT_FAILURE);
        -:  157:    }
    #####:  158:    for(int i = 0; i < strlen(line); i=i+2){
    #####:  159:      if(!line[i]){
    #####:  160:        fprintf(stderr,"invalide char");
    #####:  161:        exit(EXIT_FAILURE);
        -:  162:      }
    #####:  163:      switch (line[i]) {
        -:  164:        case '\\':{
    #####:  165:          add_mirror_ext(jeu, ANTIMIRROR, i/2, compt2);
        -:  166:        }
    #####:  167:        break;
        -:  168:        case '/' :{
    #####:  169:          add_mirror_ext(jeu, MIRROR, i/2, compt2);
        -:  170:        }
    #####:  171:        break;
        -:  172:        case '.' :{
    #####:  173:          add_mirror_ext(jeu, EMPTY, i/2, compt2);
        -:  174:        }
    #####:  175:        break;
        -:  176:        case '|' : {
    #####:  177:          add_mirror_ext(jeu, VMIRROR, i/2, compt2);
        -:  178:        }
    #####:  179:        break;
        -:  180:        case '-': {
    #####:  181:          add_mirror_ext(jeu, HMIRROR, i/2, compt2);
        -:  182:        }
    #####:  183:        break;
        -:  184:        default  :
    #####:  185:        exit(EXIT_FAILURE);
        -:  186:      }
        -:  187:
        -:  188:    }
    #####:  189:    line = read_next_line(fichier,&size);
        -:  190:
    #####:  191:    compt2--;
        -:  192:  }
        -:  193:
    #####:  194:fclose(fichier);
    #####:  195:return jeu;
        -:  196:
        -:  197:}
        -:  198:
    #####:  199:void save_game(cgame g, char* filename){
    #####:  200:    if(g==NULL || filename==NULL){
    #####:  201:        fprintf(stderr,"les pointeurs sont invalides");//on teste les pointeurs passés en parametre
    #####:  202:        exit(EXIT_FAILURE);
        -:  203:    }
    #####:  204:    FILE* fichier=fopen(filename,"w");//ouverture du fichier filename(où on doit les donnés de notre jeux) en mode ecriture
    #####:  205:    if(fichier==NULL){
    #####:  206:      fprintf(stderr,"echec de l'ouverture du fichier");//test si l'ouverure a échoué si oui on sort sinon on continue
    #####:  207:      exit(EXIT_FAILURE);
        -:  208:    }
        -:  209:    /* A partir de là que le fichier est ouvert on commence à ecrire les solutions dans le fichier mais à condition
        -:  210:    aussi que le jeu soit fini c'est à dire game_is_over*/
        -:  211:    // le "fprintf(fichier,"\n")" signifie juste quedans le ficher il faut retour à la ligne
        -:  212:
        -:  213:
    #####:  214:        fprintf(fichier,"%d %d", game_width(g), game_height(g));//la premieree ligne du fichier correspond à la largeur et la hauteur de notre grille
    #####:  215:        fprintf(fichier,"\n");
        -:  216:        //la 2eme au nombre de chaque type de monstre
    #####:  217:        fprintf(fichier,"%d %d %d %d ",required_nb_monsters(g, VAMPIRE),required_nb_monsters(g, GHOST),required_nb_monsters(g, ZOMBIE),required_nb_monsters(g,SPIRIT));
    #####:  218:        fprintf(fichier,"\n");
        -:  219:        // le nombre  de monstre visible coté nord à chaque position de la largeur
    #####:  220:        for(int i=0;i<game_width(g);i++){
    #####:  221:          fprintf(fichier,"%d ",required_nb_seen(g, N, i));
        -:  222:        }
    #####:  223:        fprintf(fichier,"\n");
        -:  224:        // le nombre  de monstre visible coté sud à chaque position de la largeur
    #####:  225:        for(int i=0;i<game_width(g);i++){
    #####:  226:          fprintf(fichier,"%d ",required_nb_seen(g, S, i));
        -:  227:        }
    #####:  228:        fprintf(fichier,"\n");
        -:  229:        // le nombre  de monstre visible coté EST à chaque position de la hauteur
    #####:  230:        for(int i=0;i<game_height(g);i++){
    #####:  231:          fprintf(fichier,"%d ",required_nb_seen(g, E, i));
        -:  232:        }
    #####:  233:        fprintf(fichier,"\n");
        -:  234:        // le nombre  de monstre visible coté OUEST à chaque position de la hauteur
    #####:  235:        for(int i=0;i<game_height(g);i++){
    #####:  236:          fprintf(fichier,"%d ",required_nb_seen(g, W, i));
        -:  237:        }
    #####:  238:        fprintf(fichier,"\n");
        -:  239:        //on parcours notre grille on recupere le contenu de chaque case et on l'ecrit directement dans le fichier
    #####:  240:        for(int j=game_height(g)-1;j>=0;j--){
    #####:  241:          for(int i=0;i<game_width(g);i++){
    #####:  242:            content contenue=get_content(g,i,j);
    #####:  243:            switch (contenue) {
        -:  244:              case VAMPIRE:
    #####:  245:              fprintf(fichier,"V ");
    #####:  246:              break;
        -:  247:              case ZOMBIE:
    #####:  248:              fprintf(fichier,"Z ");
    #####:  249:              break;
        -:  250:              case GHOST:
    #####:  251:              fprintf(fichier,"G ");
    #####:  252:              break;
        -:  253:              case SPIRIT:
    #####:  254:              fprintf(fichier,"S ");
    #####:  255:              break;
        -:  256:              case MIRROR:
    #####:  257:              fprintf(fichier,"/ ");
    #####:  258:              break;
        -:  259:              case ANTIMIRROR:
    #####:  260:              fprintf(fichier,"\\ ");
    #####:  261:              break;
        -:  262:              case VMIRROR:
    #####:  263:              fprintf(fichier,"| ");
    #####:  264:              break;
        -:  265:              case HMIRROR:
    #####:  266:              fprintf(fichier,"- ");
    #####:  267:              break;
        -:  268:              case EMPTY:
    #####:  269:              fprintf(fichier," ");
        -:  270:            }
        -:  271:          }
    #####:  272:          fprintf(fichier,"\n");
        -:  273:
        -:  274:    }
    #####:  275:    fclose(fichier);//ferme le fichier
        -:  276:
    #####:  277:}
